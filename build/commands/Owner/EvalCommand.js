"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const vultrex_haste_1 = require("vultrex.haste");
const util_1 = require("util");
const { Type } = require('@extreme_hero/deeptype');
const haste = new vultrex_haste_1.VultrexHaste({ url: "https://haste.bin" });
class EvalCommand extends discord_akairo_1.Command {
    constructor() {
        super("eval", {
            aliases: ["eval"],
            category: "Owner",
            description: {
                content: "Evaluates javascript"
            },
            ownerOnly: true,
            ratelimit: 3,
            args: [
                {
                    id: "argumentss",
                    type: "string"
                }
            ]
        });
    }
    async exec(message, { argumentss }) {
        const msg = message;
        if (argumentss.length == 0)
            return message.reply("Please provide javascript to evaluate...");
        let code;
        code = code.replace(/[""]/g, '"').replace(/[""]/g, "'");
        let evaled;
        try {
            const start = process.hrtime();
            evaled = eval(code);
            if (evaled instanceof Promise) {
                evaled = await evaled;
            }
            const stop = process.hrtime(start);
            const response = [
                `**Output:** \`\`\`js\n${this.clean(util_1.inspect(evaled, { depth: 0 }))}\n\`\`\``,
                `**Type:** \`\`\`ts\n${new Type(evaled).is}\n\`\`\``,
                `**Time taken:** \`\`\`${(((stop[0] * 1e0) + stop[1])) / 1e6}ms \`\`\``
            ];
            const res = response.join('\n');
            if (res.length < 2000) {
                await msg.channel.send(res);
            }
            else {
                await haste.post(res);
            }
        }
        catch (e) {
            return message.channel.send(`Error: \`\`\`x1\n${this.clean(e)}\n\`\`\``);
        }
    }
    ;
    clean(text) {
        if (typeof text === 'string') {
            text = text
                .replace(/`/g, `\`${String.fromCharCode(8203)}`)
                .replace(/@/g, `@${String.fromCharCode(8203)}`)
                .replace(new RegExp(this.client.token, 'gi'), 'No token for you bitch');
        }
        return text;
    }
}
exports.default = EvalCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZhbENvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvT3duZXIvRXZhbENvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBeUM7QUFDekMsaURBQTZDO0FBQzdDLCtCQUErQjtBQUUvQixNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDbkQsTUFBTSxLQUFLLEdBQUcsSUFBSSw0QkFBWSxDQUFDLEVBQUMsR0FBRyxFQUFFLG1CQUFtQixFQUFDLENBQUMsQ0FBQTtBQUUxRCxNQUFxQixXQUFZLFNBQVEsd0JBQU87SUFDNUM7UUFDSSxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ1YsT0FBTyxFQUFFLENBQUMsTUFBTSxDQUFDO1lBQ2pCLFFBQVEsRUFBRSxPQUFPO1lBQ2pCLFdBQVcsRUFBRTtnQkFDVCxPQUFPLEVBQUUsc0JBQXNCO2FBQ2xDO1lBQ0QsU0FBUyxFQUFFLElBQUk7WUFDZixTQUFTLEVBQUUsQ0FBQztZQUNaLElBQUksRUFBRTtnQkFDRjtvQkFDSSxFQUFFLEVBQUUsWUFBWTtvQkFDaEIsSUFBSSxFQUFFLFFBQVE7aUJBQ2pCO2FBQ0o7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ00sS0FBSyxDQUFFLElBQUksQ0FBQyxPQUFnQixFQUFFLEVBQUUsVUFBVSxFQUEwQjtRQUN2RSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUM7UUFDcEIsSUFBRyxVQUFVLENBQUMsTUFBTSxJQUFJLENBQUM7WUFDckIsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUE7UUFFcEUsSUFBSSxJQUFJLENBQUM7UUFDVCxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN4RCxJQUFJLE1BQU0sQ0FBQztRQUVYLElBQUk7WUFDQSxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDL0IsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNwQixJQUFHLE1BQU0sWUFBWSxPQUFPLEVBQUU7Z0JBQzFCLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQzthQUN6QjtZQUVELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbkMsTUFBTSxRQUFRLEdBQUc7Z0JBQ2IseUJBQXlCLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFDLEtBQUssRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLFVBQVU7Z0JBQzFFLHVCQUF1QixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFVBQVU7Z0JBQ3BELHlCQUF5QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLFdBQVc7YUFDMUUsQ0FBQTtZQUNELE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEMsSUFBRyxHQUFHLENBQUMsTUFBTSxHQUFHLElBQUksRUFBRTtnQkFDbEIsTUFBTSxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUMvQjtpQkFBTTtnQkFDSCxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDekI7U0FDSjtRQUFDLE9BQU0sQ0FBQyxFQUFFO1lBQ1AsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDNUU7SUFDTCxDQUFDO0lBQUEsQ0FBQztJQUVGLEtBQUssQ0FBQyxJQUFJO1FBQ04sSUFBRyxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDekIsSUFBSSxHQUFHLElBQUk7aUJBQ04sT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztpQkFDL0MsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztpQkFDOUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLHdCQUF3QixDQUFDLENBQUE7U0FDOUU7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0NBQ0o7QUE1REQsOEJBNERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gXCJkaXNjb3JkLWFrYWlyb1wiO1xyXG5pbXBvcnQgeyBWdWx0cmV4SGFzdGUgfSBmcm9tICd2dWx0cmV4Lmhhc3RlJztcclxuaW1wb3J0IHsgaW5zcGVjdCB9IGZyb20gXCJ1dGlsXCI7XHJcbmltcG9ydCB7TWVzc2FnZX0gZnJvbSBcImRpc2NvcmQuanNcIjtcclxuY29uc3QgeyBUeXBlIH0gPSByZXF1aXJlKCdAZXh0cmVtZV9oZXJvL2RlZXB0eXBlJyk7XHJcbmNvbnN0IGhhc3RlID0gbmV3IFZ1bHRyZXhIYXN0ZSh7dXJsOiBcImh0dHBzOi8vaGFzdGUuYmluXCJ9KVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZhbENvbW1hbmQgZXh0ZW5kcyBDb21tYW5kIHtcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihcImV2YWxcIiwge1xyXG4gICAgICAgICAgICBhbGlhc2VzOiBbXCJldmFsXCJdLFxyXG4gICAgICAgICAgICBjYXRlZ29yeTogXCJPd25lclwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJFdmFsdWF0ZXMgamF2YXNjcmlwdFwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG93bmVyT25seTogdHJ1ZSxcclxuICAgICAgICAgICAgcmF0ZWxpbWl0OiAzLFxyXG4gICAgICAgICAgICBhcmdzOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiYXJndW1lbnRzc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGFzeW5jICBleGVjKG1lc3NhZ2U6IE1lc3NhZ2UsIHsgYXJndW1lbnRzcyB9OiB7IGFyZ3VtZW50c3M6IHN0cmluZyB9KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBjb25zdCBtc2cgPSBtZXNzYWdlO1xyXG4gICAgICAgIGlmKGFyZ3VtZW50c3MubGVuZ3RoID09IDApXHJcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlLnJlcGx5KFwiUGxlYXNlIHByb3ZpZGUgamF2YXNjcmlwdCB0byBldmFsdWF0ZS4uLlwiKVxyXG5cclxuICAgICAgICBsZXQgY29kZTtcclxuICAgICAgICBjb2RlID0gY29kZS5yZXBsYWNlKC9bXCJcIl0vZywgJ1wiJykucmVwbGFjZSgvW1wiXCJdL2csIFwiJ1wiKTtcclxuICAgICAgICBsZXQgZXZhbGVkO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IHByb2Nlc3MuaHJ0aW1lKCk7XHJcbiAgICAgICAgICAgIGV2YWxlZCA9IGV2YWwoY29kZSk7XHJcbiAgICAgICAgICAgIGlmKGV2YWxlZCBpbnN0YW5jZW9mIFByb21pc2UpIHtcclxuICAgICAgICAgICAgICAgIGV2YWxlZCA9IGF3YWl0IGV2YWxlZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgc3RvcCA9IHByb2Nlc3MuaHJ0aW1lKHN0YXJ0KTtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBbXHJcbiAgICAgICAgICAgICAgICBgKipPdXRwdXQ6KiogXFxgXFxgXFxganNcXG4ke3RoaXMuY2xlYW4oaW5zcGVjdChldmFsZWQsIHtkZXB0aDogMH0pKX1cXG5cXGBcXGBcXGBgLFxyXG4gICAgICAgICAgICAgICAgYCoqVHlwZToqKiBcXGBcXGBcXGB0c1xcbiR7bmV3IFR5cGUoZXZhbGVkKS5pc31cXG5cXGBcXGBcXGBgLFxyXG4gICAgICAgICAgICAgICAgYCoqVGltZSB0YWtlbjoqKiBcXGBcXGBcXGAkeygoKHN0b3BbMF0gKiAxZTApICsgc3RvcFsxXSkpIC8gMWU2fW1zIFxcYFxcYFxcYGBcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICBjb25zdCByZXMgPSByZXNwb25zZS5qb2luKCdcXG4nKTtcclxuICAgICAgICAgICAgaWYocmVzLmxlbmd0aCA8IDIwMDApIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG1zZy5jaGFubmVsLnNlbmQocmVzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IGhhc3RlLnBvc3QocmVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2goZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZS5jaGFubmVsLnNlbmQoYEVycm9yOiBcXGBcXGBcXGB4MVxcbiR7dGhpcy5jbGVhbihlKX1cXG5cXGBcXGBcXGBgKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNsZWFuKHRleHQpIHtcclxuICAgICAgICBpZih0eXBlb2YgdGV4dCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdGV4dCA9IHRleHRcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9gL2csIGBcXGAke1N0cmluZy5mcm9tQ2hhckNvZGUoODIwMyl9YClcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9AL2csIGBAJHtTdHJpbmcuZnJvbUNoYXJDb2RlKDgyMDMpfWApXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZShuZXcgUmVnRXhwKHRoaXMuY2xpZW50LnRva2VuLCAnZ2knKSwgJ05vIHRva2VuIGZvciB5b3UgYml0Y2gnKVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGV4dDtcclxuICAgIH1cclxufSJdfQ==